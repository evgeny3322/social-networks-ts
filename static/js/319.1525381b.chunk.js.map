{"version":3,"file":"static/js/319.1525381b.chunk.js","mappings":"iMACA,G,QAAA,CAAgB,QAAU,2BCA1B,EAAgC,mCAAhC,EAAgF,gC,mBCkBhF,EAV6C,SAACA,GAC1C,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,gBAAKC,UAAWC,EAAhB,UACH,SAAC,KAAD,CAASC,GAAIJ,EAAME,UAAW,SAAAG,GAAW,OAAIA,EAAYC,SAAWH,EAAeA,GAAnF,SACKJ,EAAMQ,UCbnB,EAA0B,yBCY1B,EALuC,SAACR,GACpC,OAAO,gBAAKG,UAAWC,EAAhB,SACFJ,EAAMS,W,uCCGTC,GAAcC,EAAAA,EAAAA,GAAiB,IAqB/BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAnBsC,SAACb,GAC/D,OACI,iBAAMe,SAAUf,EAAMgB,aAAtB,UACI,4BACI,0BACI,SAACC,EAAA,EAAD,CACIC,UAAWC,EAAAA,EACXX,KAAM,aACNY,SAAU,CAACC,EAAAA,EAAUX,GACrBY,YAAa,0BAErB,0BACI,+CA8CpB,EArCgB,SAACtB,GAEb,IAAMuB,EAAkBvB,EAAMwB,YAAYC,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAClD,SAAC,EAAD,CAEI1B,GAAIyB,EAAEzB,GACNM,KAAMmB,EAAEnB,MAFHmB,EAAEzB,OAMT2B,EAAmB7B,EAAMwB,YAAYM,SAASJ,KAAI,SAACK,EAAGH,GAAJ,OACpD,SAAC,EAAD,CAEI1B,GAAI6B,EAAE7B,GACNO,QAASsB,EAAEtB,SAFNsB,EAAE7B,OAUf,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,cAAhB,SACKmB,KAEL,iBAAKpB,UAAWC,EAAAA,SAAhB,WACI,yBACKyB,KAEL,SAACjB,EAAD,CAAqBG,SAbX,SAACiB,GACnBC,QAAQC,IAAIF,GACZhC,EAAMmC,YAAYH,EAASI,sB,6BCzBtBC,GAAmBC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KATrC,SAACC,GACrB,MAAO,CACHhB,YAAagB,EAAMhB,eAO2D,CAACW,YAAAA,EAAAA,IAAeM,EAAAA,EAAtEH,CAAwFI","sources":["webpack://social-networks-ts/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-networks-ts/./src/components/Dialogs/DialogItem/DialogsItem.module.css?ac9e","components/Dialogs/DialogItem/DialogItem.tsx","webpack://social-networks-ts/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__fFBnd\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs__item\":\"DialogsItem_dialogs__item__rYBvk\",\"activeLink\":\"DialogsItem_activeLink__Uwqx8\"};","import React from 'react';\nimport s from \"./DialogsItem.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type DialogItemType = {\n    id: number,\n    name: string\n}\n\nconst DialogItem: React.FC<DialogItemType> = (props) => {\n    let path = \"/dialogs/\" + props.id;\n\n    return <div className={s.dialogs__item}>\n        <NavLink to={path} className={dialogsLink => dialogsLink.isActive ? s.activeLink : s.dialogs__item}>\n            {props.name}\n        </NavLink>\n    </div>\n};\n\nexport default DialogItem;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__xR0Qs\",\"activeLink\":\"Message_activeLink__8v0Kd\"};","import React from 'react';\nimport s from \"./Message.module.css\";\n\nexport type MessageType = {\n    message: string,\n    id: number\n}\n\nconst Message: React.FC<MessageType> = (props) => {\n    return <div className={s.message}>\n        {props.message}\n    </div>\n};\nexport default Message;\n\n","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css'\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\nimport {Textarea} from \"../common/Forms/Forms\";\n\ntype FormDataType = {\n    newMessage: string\n}\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <div>\n                    <Field\n                        component={Textarea}\n                        name={'newMessage'}\n                        validate={[required, maxLength50]}\n                        placeholder={'Enter your message'}/>\n                </div>\n                <div>\n                    <button>Send</button>\n                </div>\n            </div>\n        </form>\n    );\n}\n\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm);\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    const dialogsElements = props.dialogsPage.dialogs.map((d, index) =>\n        <DialogItem\n            key={d.id}\n            id={d.id}\n            name={d.name}\n        />\n    );\n\n    const messagesElements = props.dialogsPage.messages.map((m, index) =>\n        <Message\n            key={m.id}\n            id={m.id}\n            message={m.message}\n        />\n    );\n\n    const addNewMessage = (formData: FormDataType) => {\n        console.log(formData)\n        props.sendMessage(formData.newMessage);\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogs_items}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>\n                    {messagesElements}\n                </div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Dialogs;","import React from 'react';\nimport {\n    DialogsReducerStateType,\n    sendMessage,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\n\ntype MapStateToPropsType = {\n    dialogsPage: DialogsReducerStateType\n}\n\ntype MapDispatchToPropsType = {\n    sendMessage: (newMessage: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n\nconst mapStateToProps = (state: AppRootStateType) : MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\n\n// для выполнения всё тех же задач использовал ф-цию compose из redux;\n\nexport const DialogsContainer = compose<React.ComponentType>(connect(mapStateToProps, {sendMessage}), WithAuthRedirect)(Dialogs);"],"names":["props","path","id","className","s","to","dialogsLink","isActive","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogsElements","dialogsPage","dialogs","map","d","index","messagesElements","messages","m","formData","console","log","sendMessage","newMessage","DialogsContainer","compose","connect","state","WithAuthRedirect","Dialogs"],"sourceRoot":""}